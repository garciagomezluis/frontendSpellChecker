doctype html
html
  head
    title Simple frontend spell-checker
    meta(charset='UTF-8')
    style(type='text/css').
      html, body { margin: 0; padding: 0; width: 100%; background-color: #e5e5e5; height: auto; font-family: Helvetica, Arial, sans-serif; }
      header { width: 100%; background-color: #414141; color: white; padding: 5px; height: auto; border-bottom: 2px solid green; }
      section { padding: 5px; }
      #phrase { padding: 5px; border-radius: 10px; border: 1px solid green; width: 50% }
      #suggest { margin-top: 10px; }
    script(src='spellChecker.js')
    script(type='text/javascript').
      document.addEventListener( "DOMContentLoaded", function(){
          var textbox = document.getElementById("phrase");
          var alertbox = document.getElementById("suggest");
          var checker = spellChecker({
            "locationAddWord": "spellChecker/loadWord/"
          });
          checker.loadTrainingFile("spellChecker/words/");
          textbox.addEventListener( "keyup", function(e){
              if( e.keyCode === 13 ) {
                  var suggest = checker.getSuggest( textbox.value, true );
                  if( suggest.length === 1 && suggest[0].distance === 0 ) {
                    alertbox.style.color = "black";
                  } else {
                     alertbox.style.color = "red";
                  }
                
                alertbox.innerHTML = JSON.stringify(suggest);
              }
          }, false );
      }, false );
  body
    header
      h1 Simple frontend spell-checker
    section
      h2 What?
      p
        | Yep, this is another (and <span style="font-weight: bold;">very simple</span>: It means that special characters and latins are not contemplated for example) javascript Peter Norvig's implementation of his "spelling corrector" (but I consider this is more like a interpretation of his <a href="http://norvig.com/spell-correct.html">essay</a>). As he mentioned in the article, the working process is based on a little probability theory and all this is implemented in two technical steps: loading data (training) and comparing values to "guess" the word.
      h2 Why another?
      p I just wanted to try something in my free time.
      h2 Can it be used?
      p
        | I wouldn't, but if you want to try is just to load a simple file. (Brief explanation:) As the title says it is a frontend spell checker (it's based on Norvig's work). So if anyone wants to use it, it would be recommendable to load a json file in which all the common words are keys and the concurrences or times for it are values. This file can be had on a server and when a user looks for a word, the values are modified for the next one who is going to try (I guess this is the "probability" part). If you are going to use it in a "production mode" I suggest to keep in the json file static information like cities or countries.
      h2 Can I try now?
      p
        | Yep, in the server I have a json file with the more common words in Spanish (wiktionaty.org) as keys and concurrences as values (as I said above). Each user that writes a word in the textbox is going to be collaborating to make a bigger json file.
      p You can see an example of the implementation in the source code.
      input#phrase(type='type', text='text', placeholder='enter some word here! (in spanish please)')
      #suggest
      h2 Have this a mistake?
      p 
        | If I made a mistake please (In writing too (my native language is Spanish)) <a href="http://www.yatusabee.com.ar">tell me</a> or you can just fork this on <a href="">github</a>.
      h2 Licence
      p
        | This project is under the <a href="http://www.gnu.org/copyleft/gpl.html">General Public Licence</a>

